pipeline {
    agent any

    environment {
        IMAGE_NAME = "mi-aplicacion"
        IMAGE_TAG = "latest"
        CONTAINER_NAME = "mi-aplicacion"
        APP_PORT = "8090"  // Puerto en el host
        INTERNAL_PORT = "8080"  // Puerto expuesto por la app
        DOCKER_HUB_CREDENTIALS = 'dockerhub-creds'
        
    }

    stages {
        stage('Verificar Docker') {
            steps {
                script {
                    sh 'docker version || exit 1'
                }
            }
        }

        // stage('Clonar Repositorio') {
        //     steps {
        //         git 'https://github.com/MiltonEduardoHernandez/Infraestructura.git'
        //     }
        // }

        stage('Compilar con Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Construir Imagen Docker') {
            steps {
                script {
                    sh "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} /var/jenkins_home/workspace/hilo_git_jekins"
                }
            }
        }

        stage('Ejecutar Contenedor de Prueba') {
            steps {
                script {
                    sh "docker rm -f mi-aplicacion || true"
                    // sh "docker run -d --name mi-aplicacion -p 8080:8080 ${IMAGE_NAME}:${IMAGE_TAG}"
                     sh "docker run -d --name ${CONTAINER_NAME} -p ${APP_PORT}:${INTERNAL_PORT} ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }
        stage('Login en Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: "$DOCKER_HUB_CREDENTIALS", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }
        stage('Push a Docker Hub') {
            steps {
                sh 'docker push $IMAGE_NAME:$IMAGE_TAG'
            }
        }

    //     stage('Probar Contenedor') {
    //         steps {
    //             script {
    //                 sh "sleep 5 && curl -f http://localhost:8080 || exit 1"
    //             }
    //         }
    //     }
    // }

    post {
        always {
            sh "docker stop mi-aplicacion || true"
            sh "docker rm mi-aplicacion || true"
            sh 'docker run -d -p 9090:8080 --name $CONTAINER_NAME $IMAGE_NAME:$IMAGE_TAG'
        }
    }
}
/*pendiente cosas por hacer
1. agregar un stage para subir la imagen a docker hub
2. agregar un stage para desplegar la imagen en un cluster de kubernetes
3. agregar un stage para hacer pruebas de integracion
4. agregar un stage para hacer pruebas de rendimiento
5. agregar un stage para hacer pruebas de seguridad
6. agregar un stage para hacer pruebas de disponibilidad
7. agregar un stage para hacer pruebas de tolerancia a fallos
8. agregar un stage para hacer pruebas de recuperacion de desastres
9. agregar un stage para hacer pruebas de escalabilidad
10. agregar un stage para hacer pruebas de monitoreo
11. agregar un stage para hacer pruebas de logueo
12. agregar un stage para hacer pruebas de auditoria
13. agregar un stage para hacer pruebas de cumplimiento
14. agregar un stage para hacer pruebas de vulnerabilidades
15. agregar un stage para hacer pruebas de calidad de codigo
16. agregar un stage para hacer pruebas de cobertura de codigo
17. agregar un stage para hacer pruebas de rendimiento de codigo